@page "/backpacks/edit/{id:int}"
@using MauiMudBlazor.Entities
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavManager
@inject MauiMudBlazor.Contexts.BackpackAppContext _context

<h1>Edit Backpack</h1>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (backpack == null)
{
    <p>Backpack not found.</p>
}
else
{
    <!-- Add Backpack Form -->
    <MudForm Model="@form">

        <!--Heading -->
        <MudText Typo="Typo.h6">@backpack.Name</MudText>

        <!-- Name -->
        <MudTextField T="string" @bind-Value="backpack.Name"  Text="@backpack.Name" Label="Backpack Name" For="@(() => backpack.Name)" Required="true" />

        <!-- Description -->
        <MudTextField T="string" @bind-Value="backpack.Description" Text="@backpack.Description" Label="Backpack Description" For="@(() => backpack.Description)" Required="true" />

        <!-- Weight -->
        <MudNumericField T="double?" @bind-Value="backpack.Weight" Text="@backpack.Weight.ToString()" Label="Backpack Weight" For="@(() => backpack.Weight)" Adornment="Adornment.Start" AdornmentText="lbs" />

        <!-- Name -->
        <MudTextField T="int" @bind-Value="backpack.CapacityLiters" Text="@backpack.CapacityLiters.ToString()" Label="Capacity (liters)" For="@(() => backpack.CapacityLiters)" Required="true" />


        <!-- Buttons -->
        <MudStack Direction="Row" JustifyContent="space-between">

            <!-- Submit -->
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleValidSubmit">Save Changes</MudButton>

            <!-- Cancel -->
            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>

        </MudStack>

    </MudForm>
    
}

@code {
    [Parameter]
    public int id { get; set; } // ID from the route parameter

    private Backpack? backpack;
    private bool isLoading = true;
    private MudForm form;

    protected override async Task OnInitializedAsync()
    {
        // Fetch the item by ID
        try
        {
            if (_context == null)
                throw new InvalidOperationException("Database context is not initialized.");

            backpack = await _context.Backpacks.FirstOrDefaultAsync(i => i.BackpackId == id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading item: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (_context != null && backpack != null)
        {
            try
            {
                _context.Backpacks.Update(backpack);
                await _context.SaveChangesAsync();
                NavManager.NavigateTo("/backpacks/list"); // Redirect to items list
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving changes: {ex.Message}");
            }
        }
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/backpacks/list"); // Redirect to items list
    }
}
