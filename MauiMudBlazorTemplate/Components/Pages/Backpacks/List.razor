@page "/backpacks/list"
@using MauiMudBlazor.Entities
@using MauiMudBlazor.Contexts
@using MudBlazor
@using Microsoft.EntityFrameworkCore
@inject MauiMudBlazor.Contexts.BackpackAppContext _context
@inject NavigationManager NavManager



<h1>View Backpacks</h1>
<h4>Backpacks</h4>
<MudButton OnClick="ShowAddBackpackForm" Variant="Variant.Filled" Color="Color.Primary">Add Backpack</MudButton>
<br />
<br />


@if (isAddFormVisible)
{
    <!-- Add Backpack Form -->
    <MudForm Model="@form">
        
        <!--Heading -->
        <MudText Typo="Typo.h6">Add New Backpack</MudText>

        <!-- Name -->
        <MudTextField T="string" @bind-Value="newBackpack.Name" Label="Backpack Name" For="@(() => newBackpack.Name)" Required="true" />

        <!-- Description -->
        <MudTextField T="string" @bind-Value="newBackpack.Description" Label="Backpack Description" For="@(() => newBackpack.Description)" Required="true" />

        <!-- Weight -->
        <MudNumericField T="double?" @bind-Value="newBackpack.Weight" Label="Backpack Weight" For="@(() => newBackpack.Weight)" Adornment="Adornment.Start" AdornmentText="lbs" />

        <!-- Name -->
        <MudTextField T="int" @bind-Value="newBackpack.CapacityLiters" Label="Capacity (liters)" For="@(() => newBackpack.CapacityLiters)" Required="true" />


        <!-- Buttons -->
        <MudStack Direction="Row" JustifyContent="space-between">

            <!-- Submit -->
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleValidSubmit">Save Changes</MudButton>

            <!-- Cancel -->
            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="HideAddBackpackForm">Cancel</MudButton>

        </MudStack>

    </MudForm> 
}

@if (Backpacks.Any())
{
    <!--Display All Backpacks-->
    <MudGrid>
        @foreach (var pack in Backpacks)
        {
            var detailsLink = $"/backpacks/details/{pack.BackpackId}";
            var editLink = $"/backpacks/edit/{pack.BackpackId}";
            var deleteLink = $"/backpacks/delete/{pack.BackpackId}";

            <MudItem xs="12" sm="6" md="4">
                <MudCard Class="mb-4" Style="width: 18rem;">

                    <!-- Clickable image -->
                    <MudLink Href="@detailsLink">
                        <MudCardMedia Image="" Alt="Backpack Image" Class="card-img-top" />
                    </MudLink>

                    <!--Backpack Details-->
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@pack.Name</MudText>
                        <MudText Typo="Typo.body2"><strong>Capacity:</strong> @pack.CapacityLiters liters</MudText>
                        <MudText Typo="Typo.body2"><strong>Weight</strong> @pack.Weight lbs</MudText>
                        <MudText Typo="Typo.body2"><strong>Description:</strong> @pack.Description</MudText>
                        </MudCardContent>

                        <MudCardActions>
                            <MudButtonGroup>
                                <MudLink Href="@editLink">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" />
                                </MudLink>
                                <MudLink Href="@deleteLink">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" />
                                </MudLink>
                            </MudButtonGroup>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
        }
    </MudGrid>



}
else
{
    <p>No items found.</p>
}







@code 
{
    private List<Backpack> Backpacks = new();
    private Backpack newBackpack = new Backpack();
    private bool isAddFormVisible = false;
    private MudForm form;


    protected override async Task OnInitializedAsync()
    {
        // ensure context is initialized for debuggings sake
        if (_context == null)
            throw new InvalidOperationException("Database context is not initialized.");

        Backpacks = await _context.Backpacks.ToListAsync();

    }

    private void ShowAddBackpackForm() => isAddFormVisible = true;
    private void HideAddBackpackForm() => isAddFormVisible = false;


    private async Task HandleValidSubmit()
    {
        if (_context != null)
        {
            
            newBackpack.CreatedAt = DateTime.Now;
            _context.Backpacks.Add(newBackpack);
            await _context.SaveChangesAsync();
            Backpacks.Add(newBackpack); // Add to the list to update the UI
            newBackpack = new Backpack(); // Reset form fields
            isAddFormVisible = false; // Hide form after submission
        }
    }

}
