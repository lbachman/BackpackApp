@page "/configurations/list"
@using System.Diagnostics
@using MudBlazor
@using MauiMudBlazor.Entities
@using MauiMudBlazor.Contexts
@using Microsoft.EntityFrameworkCore
@inject MauiMudBlazor.Contexts.BackpackAppContext _context

<h1>View Configurations</h1>
<h4>Backpack Configurations</h4>
<MudButton OnClick="ShowAddConfigForm" Variant="Variant.Filled" Color="Color.Primary">Add Configuration</MudButton>
<br />
<br />

@if (isAddFormVisible)
{
    <!-- Add Backpack Form -->
    <MudForm Model="@form">

        <!--Heading -->
        <MudText Typo="Typo.h6">Add New Configuration</MudText>

        <!-- Backpack Id Input Field -->
        <MudTextField T="int" Label="Backpack ID" @bind-Value="newConfiguration.BackpackId" />


        <!-- Dropdown Menu to Select an ID -->
        <MudMenu Label="Select an ID" Color="Color.Primary">
            @foreach (var backpack in backpacks)
            {
                <MudMenuItem OnClick="@(() => SelectId(backpack.BackpackId))">
                    @backpack.Name (ID: @backpack.BackpackId)
                </MudMenuItem>
            }
        </MudMenu>

        <!-- Name -->
        <MudTextField T="string" @bind-Value="newConfiguration.Name" Label="Configuration Name" For="@(() => newConfiguration.Name)" Required="true" />

        <!-- Description -->
        <MudTextField T="string" @bind-Value="newConfiguration.Description" Label="Configuration Description" For="@(() => newConfiguration.Description)" Required="true" />

        <!-- Buttons -->
        <MudStack Direction="Row" JustifyContent="space-between">

            <!-- Submit -->
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleValidSubmit">Save Changes</MudButton>

            <!-- Cancel -->
            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="HideAddConfigForm">Cancel</MudButton>

        </MudStack>

    </MudForm>




}

@if (BackpackConfigurations.Any())
{
    <MudGrid>
        @foreach (var config in BackpackConfigurations)
        {
            var detailsLink = $"/configurations/details/{config.ConfigId}";
            var editLink = $"/configurations/edit/{config.ConfigId}";
            var deleteLink = $"/configurations/delete/{config.ConfigId}";

            <MudItem xs="12" sm="6" md="4">
                <MudCard Class="mb-4" Style="width: 18rem;">

                    @* <!-- Clickable image -->
                    <MudLink Href="@detailsLink">
                        <MudCardMedia Image="" Alt="Configuration Image" Class="card-img-top" />
                    </MudLink> *@

                    <MudCardContent>
                        <MudText Typo="Typo.h5">@config.Name</MudText>
                            <MudText Typo="Typo.body2">@config.Description</MudText>
                            <MudText Typo="Typo.body2">Created: @config.CreatedAt?.ToString("MMM dd, yyyy")</MudText>
                        </MudCardContent>

                        <MudCardActions>
                            <MudButtonGroup>

                                <MudLink Href="@editLink">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" />
                                </MudLink>

                                <MudLink Href="@detailsLink">
                                    <MudIconButton Icon="@Icons.Material.Filled.Details" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" />
                                </MudLink>

                                <MudLink Href="@deleteLink">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" />
                                </MudLink>

                            </MudButtonGroup>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
        }
    </MudGrid>
}
else
{
    <p>No configurations found.</p>
}

<!-- Spacer -->
<div style="height: 100px;"></div>

@code
{
    private MudForm form;
    private List<BackpackConfiguration> BackpackConfigurations = new();
    private BackpackConfiguration newConfiguration = new BackpackConfiguration();
    public List<Backpack> backpacks = new List<Backpack>();
    private bool isAddFormVisible = false;

    protected override async Task OnInitializedAsync()
    {
        if (_context == null)
            throw new InvalidOperationException("Database context is not initialized.");

        BackpackConfigurations = await _context.BackpackConfigurations.ToListAsync();
        backpacks = _context.Backpacks.ToList();
    }

    private void ShowAddConfigForm() => isAddFormVisible = true;

    private void HideAddConfigForm() => isAddFormVisible = false;

    private void SelectId(int id)
    {
        newConfiguration.BackpackId = id;
    }

    private async Task HandleValidSubmit()
    {      

        if (_context != null)
        {
            try
            {
                newConfiguration.CreatedAt = DateTime.Now;
                _context.BackpackConfigurations.Add(newConfiguration);
                await _context.SaveChangesAsync();


                BackpackConfigurations.Add(newConfiguration);
                newConfiguration = new BackpackConfiguration(); // Reset the form
                isAddFormVisible = false;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error saving item: {ex.Message}");
            }
        }
    }
}
