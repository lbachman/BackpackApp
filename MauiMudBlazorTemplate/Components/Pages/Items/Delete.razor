@page "/items/delete/{ItemId:int}"
@using MauiMudBlazor.Entities
@using MauiMudBlazor.Contexts
@inject MauiMudBlazor.Contexts.BackpackAppContext _context
@inject NavigationManager NavManager

<h1>Delete Item</h1>

@if (itemToDelete != null)
{
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6" Color="Color.Warning">
            Are you sure you want to delete this item?
        </MudText>
        <MudText Typo="Typo.body1">
            <strong>Name:</strong> @itemToDelete.Name
        </MudText>
        <MudText Typo="Typo.body1">
            <strong>Description:</strong> @itemToDelete.Description
        </MudText>
        <MudDivider Class="my-2" />
        <MudStack Direction="Row" Spacing="2" JustifyContent="space-between">
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteItem">
                Yes, Delete
            </MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="Cancel">
                Cancel
            </MudButton>
        </MudStack>
    </MudPaper>

}
else if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <p class="text-danger">The item was not found.</p>
}

@code {
    [Parameter]
    public int ItemId { get; set; }

    private Item? itemToDelete;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        if (_context == null)
            throw new InvalidOperationException("Database context is not initialized.");

        itemToDelete = await _context.Items.FindAsync(ItemId);
        isLoading = false;
    }

    private async Task DeleteItem()
    {
        if (_context != null && itemToDelete != null)
        {
            _context.Items.Remove(itemToDelete);
            await _context.SaveChangesAsync();

            // Redirect to the list page
            NavManager.NavigateTo("/items/list");
        }
    }

    private void Cancel()
    {
        // Navigate back to the list page
        NavManager.NavigateTo("/items/list");
    }
}
