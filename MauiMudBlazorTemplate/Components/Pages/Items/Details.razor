@page "/items/details/{ItemId:int}"
@using MauiMudBlazor.Entities
@using MauiMudBlazor.Contexts
@inject MauiMudBlazor.Contexts.BackpackAppContext _context
@inject NavigationManager NavManager

<h1>Item Details</h1>

@if (itemDetails != null)
{
    var editLink = $"/items/edit/{ItemId}";

    <MudCard Style="width: 24rem;" Class="mb-4">
    <!-- Item Image -->
    <MudCardMedia Image="@itemDetails.PictureUrl" Alt="Item Image" Class="card-img-top" />

    <!-- Card Body -->
    <MudCardContent>
        <MudText Typo="Typo.h5" Class="card-title">@itemDetails.Name</MudText>
        <MudText Typo="Typo.body1"><strong>Description:</strong> @itemDetails.Description</MudText>
        <MudText Typo="Typo.body1"><strong>Weight:</strong> @itemDetails.Weight lbs</MudText>
        <MudText Typo="Typo.body1"><strong>Quantity:</strong> @itemDetails.Quantity</MudText>
        <MudText Typo="Typo.body1">
            <strong>In Backpack:</strong> @(itemDetails.BackpackId != 1 ? "Yes" : "No")
        </MudText>
    </MudCardContent>

    <!-- Card Actions -->
    <MudCardActions>

        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="GoBack">Back to List</MudButton>

        <MudLink Href="@editLink">
            <MudButton Variant="Variant.Filled" Color="Color.Primary">Edit</MudButton>
        </MudLink>

        <MudLink>
            <MudIconButton Icon="@Icons.Material.Filled.Camera" OnClick="HandleTakePicture" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" />
        </MudLink>

    </MudCardActions>

</MudCard>
}

else if (isLoading)
{
    <p>Loading item details...</p>
}

else
{
    <p class="text-danger">The item could not be found.</p>
}

@code 
{
    [Parameter]
    public int ItemId { get; set; }

    private Item? itemDetails;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        if (_context == null)
            throw new InvalidOperationException("Database context is not initialized.");

        itemDetails = await _context.Items.FindAsync(ItemId);
        isLoading = false;
    }

    async Task HandleTakePicture()
    {
        var path = await CaptureAndSavePhotoAsync();
        if (!string.IsNullOrEmpty(path))
        {
            itemDetails.PictureUrl = path;
        }
        else
        {
            throw new InvalidOperationException("Failed to capture photo.");
        }
    }


    public async Task<string?> CaptureAndSavePhotoAsync()
    {
        try
        {
            var photo = await MediaPicker.Default.CapturePhotoAsync();
            if (photo == null) return null;

            // Create unique filename
            var fileName = $"{Guid.NewGuid()}.jpg";
            var filePath = Path.Combine(FileSystem.AppDataDirectory, fileName);

            // Copy the photo to local storage
            using var sourceStream = await photo.OpenReadAsync();
            using var destinationStream = File.OpenWrite(filePath);
            await sourceStream.CopyToAsync(destinationStream);

            return filePath;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Photo capture error: {ex.Message}");
            return null;
        }
    }


    private void GoBack()
    {
        NavManager.NavigateTo("/items/list");
    }
}
