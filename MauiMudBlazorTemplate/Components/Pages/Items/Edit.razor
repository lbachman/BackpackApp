@page "/items/edit/{id:int}"
@using MauiMudBlazor.Entities
@using MudBlazor
@using MudBlazor.Extensions
@using Microsoft.EntityFrameworkCore
@using System.Diagnostics
@inject NavigationManager NavManager
@inject MauiMudBlazor.Contexts.BackpackAppContext _context

<h1>Edit Item</h1>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (item == null)
{
    <p>Item not found.</p>
}
else
{
    <MudForm Model="@form" >
    <MudText Typo="Typo.h6">@item.Name</MudText>
    
    <!-- Name -->
    <MudTextField T="string" Text="@item.Name" @bind-Value="item.Name" Label="Item Name" For="@(() => item.Name)" Required="true" />

    <!-- Description -->
    <MudTextField T="string" Text="@item.Description" @bind-Value="item.Description" Label="Item Description" For="@(() => item.Description)" Required="true" />

    <!-- Weight -->
    <MudNumericField T="double" Text="@item.Weight.ToString()" @bind-Value="item.Weight" Label="Item Weight" For="@(() => item.Weight)" Adornment="Adornment.Start" AdornmentText="lbs" />

    <!-- Quantity -->
    <MudNumericField T="int?" Text="@item.Quantity.ToString()" @bind-Value="item.Quantity" Label="Item Quantity" For="@(() => item.Quantity)" />

    <!-- Buttons -->
    <MudStack Direction="Row" JustifyContent="space-between">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleValidSubmit">Save Changes</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
    </MudStack>
</MudForm>

}

@code {
    [Parameter]
    public int id { get; set; } // ID from the route parameter

    private MudForm form;
    private Item item;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        // Fetch the item by ID
        try
        {
            if (_context == null)
                throw new InvalidOperationException("Database context is not initialized.");

            item = await _context.Items.FirstOrDefaultAsync(i => i.ItemId == id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading item: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (_context != null && item != null)
        {
            try
            {
                _context.Items.Update(item);
                await _context.SaveChangesAsync();
                NavManager.NavigateTo("/items/list"); // Redirect to items list
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error saving changes: {ex.Message}");
            }
        }
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/items/list"); // Redirect to items list
    }
}
