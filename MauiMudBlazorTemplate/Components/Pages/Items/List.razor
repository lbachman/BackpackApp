@page "/items/list"
@using MudBlazor
@using MauiMudBlazor.Entities
@using MauiMudBlazor.Contexts
@using Microsoft.EntityFrameworkCore
@inject MauiMudBlazor.Contexts.BackpackAppContext _context
@inject NavigationManager NavManager

<h1>View Items</h1>
<h4>Items</h4>

<button @onclick="ShowAddItemForm">Add Item</button>
<br />
<br />

@if (isAddFormVisible)
{
    <div class="mb-4">
        <h5>Add New Item</h5>
        <EditForm Model="newItem" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" class="form-control" @bind-Value="newItem.Name" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" class="form-control" @bind-Value="newItem.Description" />
            </div>

            <div class="mb-3">
                <label for="weight" class="form-label">Weight:</label>
                <InputNumber id="weight" class="form-control" @bind-Value="newItem.Weight" />
            </div>

            <div class="mb-3">
                <label for="quantity" class="form-label">Quantity:</label>
                <InputNumber id="quantity" class="form-control" @bind-Value="newItem.Quantity" />
            </div>

            <div class="mb-3">
                <label for="pictureUrl" class="form-label">Picture URL:</label>
                <InputText id="pictureUrl" class="form-control" @bind-Value="newItem.PictureUrl" />
            </div>

            <div class="d-flex justify-content-between">
                <button type="submit" class="btn btn-primary" @onclick="HandleValidSubmit">Add Item</button>
                <button type="button" class="btn btn-secondary" @onclick="HideAddItemForm">Cancel</button>
            </div>
        </EditForm>
    </div>
}







@if (Items.Any())
{
    <MudGrid>
        @foreach (var item in Items)
        {
            var detailsLink = $"/items/details/{item.ItemId}";
            var editLink = $"/items/edit/{item.ItemId}";
            var deleteLink = $"/items/delete/{item.ItemId}";

            <MudItem xs="12" sm="6" md="4">
                <MudCard Class="mb-4" Style="width: 18rem;">
                    <!-- Clickable image -->
                    <MudLink Href="@detailsLink">
                        <MudCardMedia Image="" Alt="Item Image" Class="card-img-top" />
                    </MudLink>

                    <MudCardContent>
                        <MudText Typo="Typo.h5">@item.Name</MudText>
                            <MudText Typo="Typo.body2">@item.Description</MudText>
                            <MudText Typo="Typo.body2">Weight: @item.Weight</MudText>
                            <MudText Typo="Typo.body2">@item.Quantity</MudText>
                        </MudCardContent>

                        <MudCardActions>
                            <MudButtonGroup>
                                <MudLink Href="@editLink">
                                    <MudButton Variant="Variant.Text" Color="Color.Secondary">
                                        Edit
                                    </MudButton>
                                </MudLink>
                                <MudLink Href="@deleteLink">
                                    <MudButton Variant="Variant.Text" Color="Color.Error">
                                        Delete
                                    </MudButton>
                                </MudLink>
                            </MudButtonGroup>
                        </MudCardActions>

                    </MudCard>
                </MudItem>
        }
    </MudGrid>

}

else
{
    <p>No items found.</p>
}




@code 
{
    private List<Item> Items = new();
    private Item newItem = new Item();
    private bool isAddFormVisible = false;

    protected override async Task OnInitializedAsync()
    {
        // ensure context is initialized
        if (_context == null)
            throw new InvalidOperationException("Database context is not initialized.");

        Items = await _context.Items.ToListAsync();    

    }

    private void ShowAddItemForm() => isAddFormVisible = true;

    private void HideAddItemForm() => isAddFormVisible = false;


    private async Task HandleValidSubmit()
    {
        if (_context != null)
        {
            newItem.BackpackId = 1;
            newItem.CreatedAt = DateTime.Now;
            newItem.InBag = false;
            _context.Items.Add(newItem);
            await _context.SaveChangesAsync();
            Items.Add(newItem); // Add to the list to update the UI
            newItem = new Item(); // Reset form fields
            isAddFormVisible = false; // Hide form after submission
        }
    }


    //private void AddItem() => NavManager.NavigateTo("/add-product");

}
