@page "/items/list"
@using MauiMudBlazor.Entities
@using MauiMudBlazor.Contexts
@using Microsoft.EntityFrameworkCore
@inject MauiMudBlazor.Contexts.BackpackAppContext _context
@inject NavigationManager NavManager
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" />

<h1>View Items</h1>
<h4>Items</h4>

<button @onclick="ShowAddItemForm">Add Item</button>
<br />
<br />

@if (isAddFormVisible)
{
    <div class="mb-4">
        <h5>Add New Item</h5>
        <EditForm Model="newItem" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" class="form-control" @bind-Value="newItem.Name" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" class="form-control" @bind-Value="newItem.Description" />
            </div>

            <div class="mb-3">
                <label for="weight" class="form-label">Weight:</label>
                <InputNumber id="weight" class="form-control" @bind-Value="newItem.Weight" />
            </div>

            <div class="mb-3">
                <label for="quantity" class="form-label">Quantity:</label>
                <InputNumber id="quantity" class="form-control" @bind-Value="newItem.Quantity" />
            </div>

            <div class="mb-3">
                <label for="pictureUrl" class="form-label">Picture URL:</label>
                <InputText id="pictureUrl" class="form-control" @bind-Value="newItem.PictureUrl" />
            </div>

            <div class="d-flex justify-content-between">
                <button type="submit" class="btn btn-primary" @onclick="HandleValidSubmit">Add Item</button>
                <button type="button" class="btn btn-secondary" @onclick="HideAddItemForm">Cancel</button>
            </div>
        </EditForm>
    </div>
}







@if (Items.Any())
{
    <div class="row">
        @foreach (var item in Items)
        {
            <div class="col-md-4 col-sm-6 mb-4">
                <div class="card mb-4" style="width: 18rem;">
                    <a href="/items/details/@item.ItemId" class="card-link">
                        <img  src="@item.PictureUrl" class="card-img-top" alt="Item Image">
                        <div class="card-body">
                            <h5 class="card-title">@item.Name</h5>
                            <p class="card-text">@item.Description</p>
                            <p class="card-text">Weight: @item.Weight</p>
                            <p class="card-text">Quantity: @item.Quantity</p>
                        </div>
                    </a>
                    <div class="card-body">
                        <div class="btn-group" role="group">
                            <a href="/items/edit/@item.ItemId" class="btn btn-secondary">Edit</a>
                            <a href="/items/delete/@item.ItemId" class="btn btn-danger">Delete</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No items found.</p>
}










@code 
{
    private List<Item> Items = new();
    private Item newItem = new Item();
    private bool isAddFormVisible = false;

    protected override async Task OnInitializedAsync()
    {
        // ensure context is initialized
        if (_context == null)
            throw new InvalidOperationException("Database context is not initialized.");

        Items = await _context.Items.ToListAsync();    

    }

    private void ShowAddItemForm() => isAddFormVisible = true;

    private void HideAddItemForm() => isAddFormVisible = false;


    private async Task HandleValidSubmit()
    {
        if (_context != null)
        {
            newItem.BackpackId = 1;
            newItem.CreatedAt = DateTime.Now;
            newItem.InBag = false;
            _context.Items.Add(newItem);
            await _context.SaveChangesAsync();
            Items.Add(newItem); // Add to the list to update the UI
            newItem = new Item(); // Reset form fields
            isAddFormVisible = false; // Hide form after submission
        }
    }


    //private void AddItem() => NavManager.NavigateTo("/add-product");

}
