@page "/items/list"
@using System.Diagnostics
@using MudBlazor
@using MauiMudBlazor.Entities
@using MauiMudBlazor.Contexts
@using Microsoft.EntityFrameworkCore
@inject MauiMudBlazor.Contexts.BackpackAppContext _context
@inject NavigationManager NavManager

<h1>View Items</h1>
<h4>Items</h4>
<MudButton OnClick="ShowAddItemForm" Variant="Variant.Filled" Color="Color.Primary">Add Item</MudButton>
<br />
<br />

@if (isAddFormVisible)
{
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h5">Add New Item</MudText>
        <MudForm @ref="mudForm" Validate="@HandleValidSubmit()">
            <MudTextField @bind-Value="newItem.Name" Label="Item Name" Required="true" />
            <MudNumericField @bind-Value="newItem.Weight" Label="Weight" Required="true" />
            <MudTextField @bind-Value="newItem.Description" Label="Description" />
            <br>
            <br>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small" Type="Submit">Add Item</MudButton>
            <br>
            <MudButton Variant="Variant.Filled"  OnClick="HideAddItemForm">Cancel</MudButton>
        </MudForm>
    </MudPaper>
    <br>
    <br>
}




@if (Items.Any())
{
    <MudGrid>
        @foreach (var item in Items)
        {
            var detailsLink = $"/items/details/{item.ItemId}";
            var editLink = $"/items/edit/{item.ItemId}";
            var deleteLink = $"/items/delete/{item.ItemId}";

            <MudItem xs="12" sm="6" md="4">
                <MudCard Class="mb-4" Style="width: 18rem;">
                    <!-- Clickable image -->
                    <MudLink Href="@detailsLink">
                        <MudCardMedia Image="" Alt="Item Image" Class="card-img-top" />
                    </MudLink>

                    <MudCardContent>
                        <MudText Typo="Typo.h5">@item.Name</MudText>
                            <MudText Typo="Typo.body2">@item.Description</MudText>
                            <MudText Typo="Typo.body2">Weight: @item.Weight</MudText>
                            <MudText Typo="Typo.body2">@item.Quantity</MudText>
                        </MudCardContent>

                        <MudCardActions>
                            <MudButtonGroup>
                                <MudLink Href="@editLink">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" />
                                </MudLink>
                                <MudLink Href="@deleteLink">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" />
                                </MudLink>
                            </MudButtonGroup>
                        </MudCardActions>

                    </MudCard>
                </MudItem>
        }
    </MudGrid>
}

else
{
    <p>No items found.</p>
}




@code 
{
    private Item newItem = new Item();
    private MudForm? mudForm;
    private List<Item> Items = new();
    private bool hasErrors = false;
    private bool isAddFormVisible = false;



    protected override async Task OnInitializedAsync()
    {
        // ensure context is initialized
        if (_context == null)
            throw new InvalidOperationException("Database context is not initialized.");

        Items = await _context.Items.ToListAsync();    

    }



    private void ShowAddItemForm() => isAddFormVisible = true;
    private void HideAddItemForm() => isAddFormVisible = false;


    private async Task HandleValidSubmit()
    {
        if (_context != null)
        {
            try
            {
                newItem.BackpackId = 1;
                newItem.CreatedAt = DateTime.Now;
                newItem.InBag = false;
                _context.Items.Add(newItem);
                await _context.SaveChangesAsync();


                Items.Add(newItem);
                newItem = new Item(); // Reset the form
                isAddFormVisible = false;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving item: {ex.Message}");
            }
        }
    }


    private void HandleInvalidSubmit()
    {
        hasErrors = true;
        Debug.WriteLine("Validation failed.");
        Debug.WriteLine($"Validation failed: {string.Join(", ", mudForm?.Errors.ToList() ?? new List<string>())}");
    }

}
