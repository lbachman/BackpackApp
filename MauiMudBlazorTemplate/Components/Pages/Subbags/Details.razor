@page "/subbags/details/{SubbagId:int}"
@using MauiMudBlazor.Entities
@using MauiMudBlazor.Contexts
@using MudBlazor
@using Microsoft.EntityFrameworkCore
@inject MauiMudBlazor.Contexts.BackpackAppContext _context
@inject NavigationManager NavManager

<MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@GoBack">
    <MudIcon Icon="@Icons.Material.Filled.ArrowBack" />
    Back
</MudButton>

<h1>SubBag Details</h1>

@if (subBag != null)
{
    var editLink = $"/subbags/edit/{SubBagId}";

    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h6">@subBag.Name</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>

                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.body1">Description</MudText>
                        <MudText Typo="Typo.body1" Color="Color.Primary">@subBag.Description</MudText>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.body1">Empty Bag Weight: </MudText>
                        <MudText Typo="Typo.body1" Color="Color.Primary">@(Math.Round((double)Backpack.Weight, 2)) lbs</MudText>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.body1">Total Weight: </MudText>
                        <MudText Typo="Typo.body1" Color="Color.Primary">@(Math.Round((double)(totalItemsWeight + Backpack.Weight), 2)) lbs</MudText>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.body1">Items Weight: </MudText>
                        <MudText Typo="Typo.body1" Color="Color.Primary">@(Math.Round((double)totalItemsWeight, 2)) lbs</MudText>
                    </MudItem>

                </MudGrid>
            </MudCardContent>
        </MudCard>
}
else if (isLoading)
{
    <p>Loading item details...</p>
}
else
{
    <p class="text-danger">The subbag could not be found.</p>
}


<!-- Items That Are Currently In The subbag -->
<h1>Subbag Items</h1>
@if (subBagItems.Any())
{
    <MudGrid>
        @foreach (var item in subBagItems)
        {
            var editLink = $"/items/edit/{item.ItemId}";
            var deleteLink = $"/items/delete/{item.ItemId}";

            <MudItem xs="6" sm="6" md="4">
                <!-- Set xs=6 for 2 cards per row on small screens -->
                <MudCard Class="mb-2" Style="width: 100%;">

                    <MudCardContent>
                        <MudText Typo="Typo.h6" Class="truncate-text">@item.Name</MudText> <!-- Shrink text -->
                            <MudText Typo="Typo.body2">Weight: @item.Weight lbs</MudText>
                    </MudCardContent>

                    <MudCardActions>
                        <MudStack Spacing="2">

                            <!-- Toggle InBag Button -->
                            <MudButton OnClick="() => ToggleBag(item)" FullWidth>
                             Toggle InBag
                         </MudButton>

                         <!-- Display InBag status -->
                         <MudText Typo="Typo.body2" Align="Align.Center">
                             @(item.InBag == true ? "In Bag" : "Not In Bag")
                         </MudText>

                         <!-- Remove from Config Button -->
                         <MudButton OnClick="@(() => RemoveFromSubBag(item.ItemId))" Color="Color.Error" FullWidth>
                             Remove from SubBag
                         </MudButton>
                     </MudStack>
                 </MudCardActions>

             </MudCard>
         </MudItem>
        }
    </MudGrid>
}
else
{
    <p>No SubBag Items.</p>
}



<h1>All Items</h1>
@if (notSubBagItems.Any())
{
    <MudGrid>
        @foreach (var item in notSubBagItems)
        {
            var detailsLink = $"/items/details/{item.ItemId}";
            var editLink = $"/items/edit/{item.ItemId}";
            var deleteLink = $"/items/delete/{item.ItemId}";

            <MudItem xs="6" sm="6" md="4">
                <!-- Set xs=6 for 2 cards per row on small screens -->
                <MudCard Class="mb-4" Style="width: 100%;">
                    <!-- Adjusted width for better scaling -->
                    <!-- Clickable image -->
                    <MudLink Href="@detailsLink">
                        <!-- Add your image source here -->
                    </MudLink>

                    <MudCardContent>
                        <MudText Typo="Typo.h6" Class="truncate-text">@item.Name</MudText> <!-- Shrink text -->
                            <MudText Typo="Typo.body2">@item.Description</MudText>
                            <MudText Typo="Typo.body2">Weight: @item.Weight</MudText>
                            <MudText Typo="Typo.body2">Quantity: @item.Quantity</MudText>

                            <!-- Add button -->
                            <MudButton Color="Color.Primary" OnClick="@(() => Add2SubBag(@item.ItemId))">Add</MudButton>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
        }
    </MudGrid>
}
else
{
    <p>No Items Not In SubBag.</p>
}
<!-- Spacer -->
<div style="height: 100px;"></div>


@code
{
    [Parameter]
    public int SubBagId { get; set; }

    private SubBag? subBag;

    private Backpack Backpack;

    private bool isLoading = true;

    private double totalItemsWeight;

    private List<Item> subBagItems = new List<Item>();

    private List<Item> notSubBagItems = new List<Item>();




    protected override async Task OnInitializedAsync()
    {
        if (_context == null)
            throw new InvalidOperationException("Database context is not initialized.");


        // get subbag by id
        subBag = await _context.SubBags.FindAsync(SubBagId);

        // get backpack associated with subbag
        Backpack = await _context.Backpacks.FindAsync(subBag.BackpackId);

        // get all  items in subbag
        subBagItems = await _context.Items.Where(x => x.SubbagId == SubBagId).ToListAsync();

        //  calculate initial weight
        foreach (var i in subBagItems)
        {
            // add to total weight if in bag
            if (i.InBag == true) totalItemsWeight += i.Weight; 
        }

        // get all items 
        notSubBagItems = await _context.Items.ToListAsync();

        // remove items from the display that are already in bag
        foreach (var item in subBagItems)
        {
            if (notSubBagItems.Contains(item))
            {
                notSubBagItems.Remove(item);
            }

        }

        isLoading = false;
    }


    /// <summary>
    /// add and remove items in subbag and adjust total weight
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    private async Task ToggleBag(Item item)
    {

        // invert inbag status
        item.InBag = !item.InBag;

        if (item.InBag == true)
        {
            totalItemsWeight += item.Weight;
        }
        else
        {
            totalItemsWeight -= item.Weight;
        }

        await _context.SaveChangesAsync();
    }





    /// <summary>
    /// Adds an item to the subbag, marking it as "InBag."
    /// </summary>
    /// <param name="itemId">The ID of the item to add to the subbag.</param>
    /// <exception cref="Exception">Throws an exception if the item is not found.</exception>
    private async Task Add2SubBag(int itemId)
    {
        // Retrieve the item from the database using FindAsync for better performance
        Item? item = await _context.Items.FindAsync(itemId);

        if (item is null)
        {
            throw new Exception("Item not found.");
        }

        // Check if the item is already in the configuration to avoid duplicates
        bool isItemAlreadyInSubBag = item.SubbagId == SubBagId;

        // item is already in subbag
        if (item.SubbagId == SubBagId)
        {
            await Application.Current!.MainPage!.DisplayAlert("Error", "Item is Already in SubBag", "OK");
            return;
        }

        item.InBag = true;

        item.SubbagId = SubBagId;

        // add to config items
        subBagItems.Add(item);

        // remove item from addable items in local memory
        notSubBagItems.Remove(item);

        // add weight
        totalItemsWeight += item.Weight;

        // Save changes asynchronously
        await _context.SaveChangesAsync();
    }




    /// <summary>
    /// Removes an item from the subbag.
    /// </summary>
    /// <param name="itemId">The ID of the item to remove from the subbag.</param>
    /// <exception cref="Exception">Throws an exception if the item is not found in the subbag.</exception>
    private async Task RemoveFromSubBag(int itemId)
    {

        // get item by id
        var item = _context.Items.FirstOrDefault(x => x.ItemId == itemId);

        if (item is null)
        {
            throw new Exception("Item not found.");
        }

        // remove from config
        subBagItems.Remove(item);

        // add it back to the items list
        notSubBagItems.Add(item);

        // only deduct from weight if in bag
        if (item.InBag == true)
        {
            // remove from weight
            totalItemsWeight -= item.Weight;
        }

        item.SubbagId = null;

        // remove from bag
        item.InBag = false;

        

        // Save changes asynchronously
        await _context.SaveChangesAsync();

    }



    /// <summary>
    /// navigate back to configuration list
    /// </summary>
    private void GoBack()
    {
        NavManager.NavigateTo("/subbags/list");
    }

}
